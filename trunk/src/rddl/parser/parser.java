
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Oct 16 05:11:52 EST 2010
//----------------------------------------------------

package rddl.parser;

import rddl.RDDL;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sat Oct 16 05:11:52 EST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\010\000\002\010\010\000" +
    "\002\010\007\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\011\007\000\002\013\003\000" +
    "\002\013\004\000\002\017\006\000\002\017\010\000\002" +
    "\034\003\000\002\034\005\000\002\012\003\000\002\012" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\014\003\000\002\014\006\000\002\015\003" +
    "\000\002\015\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\020\007\000\002" +
    "\021\003\000\002\021\004\000\002\022\016\000\002\022" +
    "\016\000\002\022\016\000\002\022\012\000\002\022\016" +
    "\000\002\023\007\000\002\041\003\000\002\041\003\000" +
    "\002\024\003\000\002\024\004\000\002\025\006\000\002" +
    "\026\006\000\002\027\007\000\002\030\003\000\002\030" +
    "\004\000\002\031\004\000\002\006\044\000\002\006\040" +
    "\000\002\006\037\000\002\006\033\000\002\007\024\000" +
    "\002\007\015\000\002\032\003\000\002\032\004\000\002" +
    "\033\010\000\002\045\003\000\002\045\004\000\002\046" +
    "\007\000\002\046\004\000\002\046\010\000\002\046\005" +
    "\000\002\046\011\000\002\046\006\000\002\047\003\000" +
    "\002\047\005\000\002\051\003\000\002\051\003\000\002" +
    "\042\006\000\002\042\003\000\002\050\003\000\002\050" +
    "\005\000\002\052\003\000\002\052\005\000\002\053\005" +
    "\000\002\054\005\000\002\054\007\000\002\055\003\000" +
    "\002\055\005\000\002\056\006\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\004\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\010\000\002\044\010\000\002\044\006" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\005\000\002\043\005\000\002" +
    "\043\004\000\002\043\004\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\010" +
    "\000\002\043\010\000\002\043\012\000\002\043\011\000" +
    "\002\043\006\000\002\043\006\000\002\043\010\000\002" +
    "\043\010\000\002\043\006\000\002\043\010\000\002\043" +
    "\006\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\010\005\007\006\011\040\006\001\002\000" +
    "\012\002\ufffd\005\007\006\011\040\006\001\002\000\012" +
    "\002\ufffb\005\007\006\011\040\006\001\002\000\004\136" +
    "\u01c0\001\002\000\004\136\226\001\002\000\004\002\225" +
    "\001\002\000\004\136\014\001\002\000\012\002\ufffc\005" +
    "\007\006\011\040\006\001\002\000\004\002\uffff\001\002" +
    "\000\004\017\015\001\002\000\004\005\016\001\002\000" +
    "\004\124\017\001\002\000\004\136\020\001\002\000\004" +
    "\103\021\001\002\000\010\011\022\012\024\040\023\001" +
    "\002\000\004\017\177\001\002\000\004\124\113\001\002" +
    "\000\004\017\025\001\002\000\006\061\026\136\030\001" +
    "\002\000\004\136\105\001\002\000\012\020\uffb3\061\026" +
    "\103\uffb3\136\030\001\002\000\010\103\054\105\056\124" +
    "\055\001\002\000\004\020\032\001\002\000\004\103\033" +
    "\001\002\000\004\032\034\001\002\000\004\124\035\001" +
    "\002\000\010\026\041\027\037\134\036\001\002\000\006" +
    "\020\uffda\103\uffda\001\002\000\004\103\uffd9\001\002\000" +
    "\004\103\042\001\002\000\004\103\uffd8\001\002\000\004" +
    "\007\043\001\002\000\004\124\044\001\002\000\004\134" +
    "\045\001\002\000\004\103\046\001\002\000\004\010\047" +
    "\001\002\000\004\124\050\001\002\000\004\135\051\001" +
    "\002\000\004\103\052\001\002\000\004\020\053\001\002" +
    "\000\012\002\uffb9\005\uffb9\006\uffb9\040\uffb9\001\002\000" +
    "\012\020\uffb0\061\uffb0\103\uffb0\136\uffb0\001\002\000\022" +
    "\026\067\027\075\127\073\130\077\134\036\135\076\136" +
    "\066\150\071\001\002\000\004\136\060\001\002\000\004" +
    "\106\063\001\002\000\010\020\uffab\106\uffab\110\061\001" +
    "\002\000\004\136\060\001\002\000\006\020\uffaa\106\uffaa" +
    "\001\002\000\006\103\064\124\065\001\002\000\012\020" +
    "\uffb1\061\uffb1\103\uffb1\136\uffb1\001\002\000\022\026\067" +
    "\027\075\127\073\130\077\134\036\135\076\136\066\150" +
    "\071\001\002\000\006\020\uffe1\103\uffe1\001\002\000\006" +
    "\020\uffdb\103\uffdb\001\002\000\006\020\uffe2\103\uffe2\001" +
    "\002\000\006\020\uffe0\103\uffe0\001\002\000\004\103\101" +
    "\001\002\000\006\020\uffdf\103\uffdf\001\002\000\006\020" +
    "\uffe3\103\uffe3\001\002\000\006\020\uffdc\103\uffdc\001\002" +
    "\000\006\020\uffdd\103\uffdd\001\002\000\006\020\uffde\103" +
    "\uffde\001\002\000\006\020\uffe4\103\uffe4\001\002\000\012" +
    "\020\uffad\061\uffad\103\uffad\136\uffad\001\002\000\004\103" +
    "\103\001\002\000\012\020\uffac\061\uffac\103\uffac\136\uffac" +
    "\001\002\000\006\020\uffb2\103\uffb2\001\002\000\006\103" +
    "\106\105\107\001\002\000\012\020\uffae\061\uffae\103\uffae" +
    "\136\uffae\001\002\000\004\136\060\001\002\000\004\106" +
    "\111\001\002\000\004\103\112\001\002\000\012\020\uffaf" +
    "\061\uffaf\103\uffaf\136\uffaf\001\002\000\004\136\114\001" +
    "\002\000\004\103\115\001\002\000\006\011\116\012\117" +
    "\001\002\000\004\017\141\001\002\000\004\017\120\001" +
    "\002\000\006\061\026\136\030\001\002\000\004\020\122" +
    "\001\002\000\004\103\123\001\002\000\004\032\124\001" +
    "\002\000\004\124\125\001\002\000\010\026\041\027\037" +
    "\134\036\001\002\000\004\103\127\001\002\000\004\007" +
    "\130\001\002\000\004\124\131\001\002\000\004\134\132" +
    "\001\002\000\004\103\133\001\002\000\004\010\134\001" +
    "\002\000\004\124\135\001\002\000\004\135\136\001\002" +
    "\000\004\103\137\001\002\000\004\020\140\001\002\000" +
    "\012\002\uffba\005\uffba\006\uffba\040\uffba\001\002\000\004" +
    "\136\144\001\002\000\006\020\uffb6\136\144\001\002\000" +
    "\004\020\152\001\002\000\004\113\145\001\002\000\004" +
    "\017\146\001\002\000\004\136\060\001\002\000\004\020" +
    "\150\001\002\000\004\103\151\001\002\000\006\020\uffb4" +
    "\136\uffb4\001\002\000\004\103\153\001\002\000\004\012" +
    "\154\001\002\000\004\017\155\001\002\000\006\061\026" +
    "\136\030\001\002\000\004\020\157\001\002\000\004\103" +
    "\160\001\002\000\004\032\161\001\002\000\004\124\162" +
    "\001\002\000\010\026\041\027\037\134\036\001\002\000" +
    "\004\103\164\001\002\000\004\007\165\001\002\000\004" +
    "\124\166\001\002\000\004\134\167\001\002\000\004\103" +
    "\170\001\002\000\004\010\171\001\002\000\004\124\172" +
    "\001\002\000\004\135\173\001\002\000\004\103\174\001" +
    "\002\000\004\020\175\001\002\000\012\002\uffbc\005\uffbc" +
    "\006\uffbc\040\uffbc\001\002\000\004\020\uffb5\001\002\000" +
    "\004\136\144\001\002\000\004\020\201\001\002\000\004" +
    "\103\202\001\002\000\004\012\203\001\002\000\004\017" +
    "\204\001\002\000\006\061\026\136\030\001\002\000\004" +
    "\020\206\001\002\000\004\103\207\001\002\000\004\032" +
    "\210\001\002\000\004\124\211\001\002\000\010\026\041" +
    "\027\037\134\036\001\002\000\004\103\213\001\002\000" +
    "\004\007\214\001\002\000\004\124\215\001\002\000\004" +
    "\134\216\001\002\000\004\103\217\001\002\000\004\010" +
    "\220\001\002\000\004\124\221\001\002\000\004\135\222" +
    "\001\002\000\004\103\223\001\002\000\004\020\224\001" +
    "\002\000\012\002\uffbb\005\uffbb\006\uffbb\040\uffbb\001\002" +
    "\000\004\002\001\001\002\000\004\017\227\001\002\000" +
    "\004\013\231\001\002\000\016\023\255\025\251\034\250" +
    "\054\246\146\257\147\253\001\002\000\004\124\232\001" +
    "\002\000\004\017\233\001\002\000\006\020\236\136\235" +
    "\001\002\000\004\020\242\001\002\000\006\020\uffe8\110" +
    "\240\001\002\000\004\103\237\001\002\000\016\023\ufff8" +
    "\025\ufff8\034\ufff8\054\ufff8\146\ufff8\147\ufff8\001\002\000" +
    "\004\136\235\001\002\000\004\020\uffe7\001\002\000\004" +
    "\103\243\001\002\000\016\023\ufff9\025\ufff9\034\ufff9\054" +
    "\ufff9\146\ufff9\147\ufff9\001\002\000\020\020\ufff0\023\255" +
    "\025\251\034\250\054\246\146\257\147\253\001\002\000" +
    "\020\020\ufff2\023\255\025\251\034\250\054\246\146\257" +
    "\147\253\001\002\000\004\124\u01bb\001\002\000\004\020" +
    "\u01ba\001\002\000\004\017\u017c\001\002\000\004\017\u016b" +
    "\001\002\000\020\020\uffee\023\255\025\251\034\250\054" +
    "\246\146\257\147\253\001\002\000\004\017\uffc5\001\002" +
    "\000\004\017\u0160\001\002\000\004\017\263\001\002\000" +
    "\020\020\ufff1\023\255\025\251\034\250\054\246\146\257" +
    "\147\253\001\002\000\004\017\uffc6\001\002\000\020\020" +
    "\uffef\023\255\025\251\034\250\054\246\146\257\147\253" +
    "\001\002\000\004\020\ufff4\001\002\000\004\020\ufff6\001" +
    "\002\000\070\051\302\052\311\055\264\056\313\061\271" +
    "\062\266\063\277\064\317\065\305\066\306\067\303\070" +
    "\300\071\315\072\312\073\267\076\310\077\275\102\274" +
    "\105\276\111\270\127\273\130\307\134\316\135\323\136" +
    "\265\137\320\150\322\001\002\000\004\024\u015b\001\002" +
    "\000\056\020\uffa6\057\uffa6\060\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\101\uffa6\103\uffa6\105\u0155\106\uffa6\110\uffa6" +
    "\114\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\122\uffa6\123" +
    "\uffa6\124\uffa6\125\uffa6\131\uffa6\001\002\000\004\105\u0152" +
    "\001\002\000\070\051\302\052\311\055\264\056\313\061" +
    "\271\062\266\063\277\064\317\065\305\066\306\067\303" +
    "\070\300\071\315\072\312\073\267\076\310\077\275\102" +
    "\274\105\276\111\270\127\273\130\307\134\316\135\323" +
    "\136\265\137\320\150\322\001\002\000\070\051\302\052" +
    "\311\055\264\056\313\061\271\062\266\063\277\064\317" +
    "\065\305\066\306\067\303\070\300\071\315\072\312\073" +
    "\267\076\310\077\275\102\274\105\276\111\270\127\273" +
    "\130\307\134\316\135\323\136\265\137\320\150\322\001" +
    "\002\000\070\051\302\052\311\055\264\056\313\061\271" +
    "\062\266\063\277\064\317\065\305\066\306\067\303\070" +
    "\300\071\315\072\312\073\267\076\310\077\275\102\274" +
    "\105\276\111\270\127\273\130\307\134\316\135\323\136" +
    "\265\137\320\150\322\001\002\000\040\057\366\060\370" +
    "\073\uff86\074\uff86\075\uff86\076\uff86\103\u014b\115\uff86\116" +
    "\uff86\117\uff86\120\uff86\122\367\123\365\125\uff86\131\uff86" +
    "\001\002\000\052\020\uff9a\057\uff9a\060\uff9a\073\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\101\uff9a\103\uff9a\106\uff9a\110\uff9a" +
    "\114\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\122\uff9a\123" +
    "\uff9a\125\uff9a\131\uff9a\001\002\000\004\105\u013e\001\002" +
    "\000\004\105\u0137\001\002\000\070\051\302\052\311\055" +
    "\264\056\313\061\271\062\266\063\277\064\317\065\305" +
    "\066\306\067\303\070\300\071\315\072\312\073\267\076" +
    "\310\077\275\102\274\105\276\111\270\127\273\130\307" +
    "\134\316\135\323\136\265\137\320\150\322\001\002\000" +
    "\004\105\u0130\001\002\000\004\105\u012d\001\002\000\026" +
    "\073\343\074\347\075\344\076\336\115\346\116\337\117" +
    "\341\120\340\125\350\131\342\001\002\000\004\024\u0128" +
    "\001\002\000\004\105\u0123\001\002\000\004\020\u0121\001" +
    "\002\000\004\105\u011e\001\002\000\004\105\u0114\001\002" +
    "\000\052\020\uff99\057\uff99\060\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\101\uff99\103\uff99\106\uff99\110\uff99\114\uff99" +
    "\115\uff99\116\uff99\117\uff99\120\uff99\122\uff99\123\uff99\125" +
    "\uff99\131\uff99\001\002\000\070\051\302\052\311\055\264" +
    "\056\313\061\271\062\266\063\277\064\317\065\305\066" +
    "\306\067\303\070\300\071\315\072\312\073\267\076\310" +
    "\077\275\102\274\105\276\111\270\127\273\130\307\134" +
    "\316\135\323\136\265\137\320\150\322\001\002\000\004" +
    "\024\u010e\001\002\000\004\105\u010b\001\002\000\004\024" +
    "\u0100\001\002\000\052\020\uff9b\057\uff9b\060\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\101\uff9b\103\uff9b\106\uff9b\110" +
    "\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\122\uff9b" +
    "\123\uff9b\125\uff9b\131\uff9b\001\002\000\004\105\375\001" +
    "\002\000\052\020\uff84\057\uff84\060\uff84\073\uff84\074\uff84" +
    "\075\uff84\076\uff84\101\uff84\103\uff84\106\uff84\110\uff84\114" +
    "\uff84\115\uff84\116\uff84\117\uff84\120\uff84\122\uff84\123\uff84" +
    "\125\uff84\131\uff84\001\002\000\004\105\333\001\002\000" +
    "\006\125\325\131\326\001\002\000\072\020\uffbf\051\302" +
    "\052\311\055\264\056\313\061\271\062\266\063\277\064" +
    "\317\065\305\066\306\067\303\070\300\071\315\072\312" +
    "\073\267\076\310\077\275\102\274\105\276\111\270\127" +
    "\273\130\307\134\316\135\323\136\265\137\320\150\322" +
    "\001\002\000\052\020\uff85\057\uff85\060\uff85\073\uff85\074" +
    "\uff85\075\uff85\076\uff85\101\uff85\103\uff85\106\uff85\110\uff85" +
    "\114\uff85\115\uff85\116\uff85\117\uff85\120\uff85\122\uff85\123" +
    "\uff85\125\uff85\131\uff85\001\002\000\052\020\uff83\057\uff83" +
    "\060\uff83\073\uff83\074\uff83\075\uff83\076\uff83\101\uff83\103" +
    "\uff83\106\uff83\110\uff83\114\uff83\115\uff83\116\uff83\117\uff83" +
    "\120\uff83\122\uff83\123\uff83\125\uff83\131\uff83\001\002\000" +
    "\004\020\uffbe\001\002\000\006\136\330\137\327\001\002" +
    "\000\006\136\330\137\327\001\002\000\052\020\uffa8\057" +
    "\uffa8\060\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\101\uffa8" +
    "\103\uffa8\106\uffa8\110\uffa8\114\uffa8\115\uffa8\116\uffa8\117" +
    "\uffa8\120\uffa8\122\uffa8\123\uffa8\125\uffa8\131\uffa8\001\002" +
    "\000\052\020\uffa9\057\uffa9\060\uffa9\073\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\101\uffa9\103\uffa9\106\uffa9\110\uffa9\114\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\120\uffa9\122\uffa9\123\uffa9\125" +
    "\uffa9\131\uffa9\001\002\000\052\020\uff95\057\uff95\060\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\101\uff95\103\uff95\106" +
    "\uff95\110\uff95\114\uff95\115\uff95\116\uff95\117\uff95\120\uff95" +
    "\122\uff95\123\uff95\125\uff95\131\uff95\001\002\000\052\020" +
    "\uff96\057\uff96\060\uff96\073\uff96\074\uff96\075\uff96\076\uff96" +
    "\101\uff96\103\uff96\106\uff96\110\uff96\114\uff96\115\uff96\116" +
    "\uff96\117\uff96\120\uff96\122\uff96\123\uff96\125\uff96\131\uff96" +
    "\001\002\000\070\051\302\052\311\055\264\056\313\061" +
    "\271\062\266\063\277\064\317\065\305\066\306\067\303" +
    "\070\300\071\315\072\312\073\267\076\310\077\275\102" +
    "\274\105\276\111\270\127\273\130\307\134\316\135\323" +
    "\136\265\137\320\150\322\001\002\000\052\020\uff86\057" +
    "\366\060\370\073\uff86\074\uff86\075\uff86\076\uff86\101\uff86" +
    "\103\uff86\106\uff86\110\uff86\114\uff86\115\uff86\116\uff86\117" +
    "\uff86\120\uff86\122\367\123\365\125\uff86\131\uff86\001\002" +
    "\000\030\073\343\074\347\075\344\076\336\110\345\115" +
    "\346\116\337\117\341\120\340\125\350\131\342\001\002" +
    "\000\070\051\302\052\311\055\264\056\313\061\271\062" +
    "\266\063\277\064\317\065\305\066\306\067\303\070\300" +
    "\071\315\072\312\073\267\076\310\077\275\102\274\105" +
    "\276\111\270\127\273\130\307\134\316\135\323\136\265" +
    "\137\320\150\322\001\002\000\070\051\302\052\311\055" +
    "\264\056\313\061\271\062\266\063\277\064\317\065\305" +
    "\066\306\067\303\070\300\071\315\072\312\073\267\076" +
    "\310\077\275\102\274\105\276\111\270\127\273\130\307" +
    "\134\316\135\323\136\265\137\320\150\322\001\002\000" +
    "\070\051\302\052\311\055\264\056\313\061\271\062\266" +
    "\063\277\064\317\065\305\066\306\067\303\070\300\071" +
    "\315\072\312\073\267\076\310\077\275\102\274\105\276" +
    "\111\270\127\273\130\307\134\316\135\323\136\265\137" +
    "\320\150\322\001\002\000\070\051\302\052\311\055\264" +
    "\056\313\061\271\062\266\063\277\064\317\065\305\066" +
    "\306\067\303\070\300\071\315\072\312\073\267\076\310" +
    "\077\275\102\274\105\276\111\270\127\273\130\307\134" +
    "\316\135\323\136\265\137\320\150\322\001\002\000\070" +
    "\051\302\052\311\055\264\056\313\061\271\062\266\063" +
    "\277\064\317\065\305\066\306\067\303\070\300\071\315" +
    "\072\312\073\267\076\310\077\275\102\274\105\276\111" +
    "\270\127\273\130\307\134\316\135\323\136\265\137\320" +
    "\150\322\001\002\000\070\051\302\052\311\055\264\056" +
    "\313\061\271\062\266\063\277\064\317\065\305\066\306" +
    "\067\303\070\300\071\315\072\312\073\267\076\310\077" +
    "\275\102\274\105\276\111\270\127\273\130\307\134\316" +
    "\135\323\136\265\137\320\150\322\001\002\000\070\051" +
    "\302\052\311\055\264\056\313\061\271\062\266\063\277" +
    "\064\317\065\305\066\306\067\303\070\300\071\315\072" +
    "\312\073\267\076\310\077\275\102\274\105\276\111\270" +
    "\127\273\130\307\134\316\135\323\136\265\137\320\150" +
    "\322\001\002\000\070\051\302\052\311\055\264\056\313" +
    "\061\271\062\266\063\277\064\317\065\305\066\306\067" +
    "\303\070\300\071\315\072\312\073\267\076\310\077\275" +
    "\102\274\105\276\111\270\127\273\130\307\134\316\135" +
    "\323\136\265\137\320\150\322\001\002\000\070\051\302" +
    "\052\311\055\264\056\313\061\271\062\266\063\277\064" +
    "\317\065\305\066\306\067\303\070\300\071\315\072\312" +
    "\073\267\076\310\077\275\102\274\105\276\111\270\127" +
    "\273\130\307\134\316\135\323\136\265\137\320\150\322" +
    "\001\002\000\070\051\302\052\311\055\264\056\313\061" +
    "\271\062\266\063\277\064\317\065\305\066\306\067\303" +
    "\070\300\071\315\072\312\073\267\076\310\077\275\102" +
    "\274\105\276\111\270\127\273\130\307\134\316\135\323" +
    "\136\265\137\320\150\322\001\002\000\070\051\302\052" +
    "\311\055\264\056\313\061\271\062\266\063\277\064\317" +
    "\065\305\066\306\067\303\070\300\071\315\072\312\073" +
    "\267\076\310\077\275\102\274\105\276\111\270\127\273" +
    "\130\307\134\316\135\323\136\265\137\320\150\322\001" +
    "\002\000\052\020\uff94\057\uff94\060\uff94\073\343\074\347" +
    "\075\344\076\336\101\uff94\103\uff94\106\uff94\110\uff94\114" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\122\uff94\123\uff94" +
    "\125\uff94\131\uff94\001\002\000\052\020\uff7e\057\uff7e\060" +
    "\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\101\uff7e\103\uff7e" +
    "\106\uff7e\110\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120" +
    "\uff7e\122\uff7e\123\uff7e\125\uff7e\131\uff7e\001\002\000\052" +
    "\020\uff90\057\uff90\060\uff90\073\343\074\347\075\344\076" +
    "\336\101\uff90\103\uff90\106\uff90\110\uff90\114\uff90\115\uff90" +
    "\116\uff90\117\uff90\120\uff90\122\uff90\123\uff90\125\uff90\131" +
    "\uff90\001\002\000\030\073\343\074\347\075\344\076\336" +
    "\106\355\115\346\116\337\117\341\120\340\125\350\131" +
    "\342\001\002\000\052\020\uff74\057\uff74\060\uff74\073\uff74" +
    "\074\uff74\075\uff74\076\uff74\101\uff74\103\uff74\106\uff74\110" +
    "\uff74\114\uff74\115\uff74\116\uff74\117\uff74\120\uff74\122\uff74" +
    "\123\uff74\125\uff74\131\uff74\001\002\000\052\020\uff7d\057" +
    "\uff7d\060\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\101\uff7d" +
    "\103\uff7d\106\uff7d\110\uff7d\114\uff7d\115\uff7d\116\uff7d\117" +
    "\uff7d\120\uff7d\122\uff7d\123\uff7d\125\uff7d\131\uff7d\001\002" +
    "\000\052\020\uff7c\057\uff7c\060\uff7c\073\uff7c\074\347\075" +
    "\344\076\uff7c\101\uff7c\103\uff7c\106\uff7c\110\uff7c\114\uff7c" +
    "\115\uff7c\116\uff7c\117\uff7c\120\uff7c\122\uff7c\123\uff7c\125" +
    "\uff7c\131\uff7c\001\002\000\052\020\uff93\057\uff93\060\uff93" +
    "\073\343\074\347\075\344\076\336\101\uff93\103\uff93\106" +
    "\uff93\110\uff93\114\uff93\115\uff93\116\uff93\117\uff93\120\uff93" +
    "\122\uff93\123\uff93\125\uff93\131\uff93\001\002\000\052\020" +
    "\uff92\057\uff92\060\uff92\073\343\074\347\075\344\076\336" +
    "\101\uff92\103\uff92\106\uff92\110\uff92\114\uff92\115\uff92\116" +
    "\uff92\117\uff92\120\uff92\122\uff92\123\uff92\125\uff92\131\uff92" +
    "\001\002\000\052\020\uff91\057\uff91\060\uff91\073\343\074" +
    "\347\075\344\076\336\101\uff91\103\uff91\106\uff91\110\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91\122\uff91\123" +
    "\uff91\125\uff91\131\uff91\001\002\000\052\020\uff8f\057\uff8f" +
    "\060\uff8f\073\343\074\347\075\344\076\336\101\uff8f\103" +
    "\uff8f\106\uff8f\110\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f" +
    "\120\uff8f\122\uff8f\123\uff8f\125\uff8f\131\uff8f\001\002\000" +
    "\052\020\uff7b\057\uff7b\060\uff7b\073\uff7b\074\347\075\344" +
    "\076\uff7b\101\uff7b\103\uff7b\106\uff7b\110\uff7b\114\uff7b\115" +
    "\uff7b\116\uff7b\117\uff7b\120\uff7b\122\uff7b\123\uff7b\125\uff7b" +
    "\131\uff7b\001\002\000\070\051\302\052\311\055\264\056" +
    "\313\061\271\062\266\063\277\064\317\065\305\066\306" +
    "\067\303\070\300\071\315\072\312\073\267\076\310\077" +
    "\275\102\274\105\276\111\270\127\273\130\307\134\316" +
    "\135\323\136\265\137\320\150\322\001\002\000\070\051" +
    "\302\052\311\055\264\056\313\061\271\062\266\063\277" +
    "\064\317\065\305\066\306\067\303\070\300\071\315\072" +
    "\312\073\267\076\310\077\275\102\274\105\276\111\270" +
    "\127\273\130\307\134\316\135\323\136\265\137\320\150" +
    "\322\001\002\000\070\051\302\052\311\055\264\056\313" +
    "\061\271\062\266\063\277\064\317\065\305\066\306\067" +
    "\303\070\300\071\315\072\312\073\267\076\310\077\275" +
    "\102\274\105\276\111\270\127\273\130\307\134\316\135" +
    "\323\136\265\137\320\150\322\001\002\000\070\051\302" +
    "\052\311\055\264\056\313\061\271\062\266\063\277\064" +
    "\317\065\305\066\306\067\303\070\300\071\315\072\312" +
    "\073\267\076\310\077\275\102\274\105\276\111\270\127" +
    "\273\130\307\134\316\135\323\136\265\137\320\150\322" +
    "\001\002\000\052\020\uff8c\057\366\060\uff8c\073\uff8c\074" +
    "\uff8c\075\uff8c\076\uff8c\101\uff8c\103\uff8c\106\uff8c\110\uff8c" +
    "\114\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\122\uff8c\123" +
    "\uff8c\125\uff8c\131\uff8c\001\002\000\052\020\uff8b\057\366" +
    "\060\370\073\uff8b\074\uff8b\075\uff8b\076\uff8b\101\uff8b\103" +
    "\uff8b\106\uff8b\110\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b" +
    "\120\uff8b\122\uff8b\123\uff8b\125\uff8b\131\uff8b\001\002\000" +
    "\052\020\uff8d\057\uff8d\060\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\101\uff8d\103\uff8d\106\uff8d\110\uff8d\114\uff8d\115" +
    "\uff8d\116\uff8d\117\uff8d\120\uff8d\122\uff8d\123\uff8d\125\uff8d" +
    "\131\uff8d\001\002\000\052\020\uff8a\057\366\060\370\073" +
    "\uff8a\074\uff8a\075\uff8a\076\uff8a\101\uff8a\103\uff8a\106\uff8a" +
    "\110\uff8a\114\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\122" +
    "\367\123\uff8a\125\uff8a\131\uff8a\001\002\000\070\051\302" +
    "\052\311\055\264\056\313\061\271\062\266\063\277\064" +
    "\317\065\305\066\306\067\303\070\300\071\315\072\312" +
    "\073\267\076\310\077\275\102\274\105\276\111\270\127" +
    "\273\130\307\134\316\135\323\136\265\137\320\150\322" +
    "\001\002\000\030\073\343\074\347\075\344\076\336\106" +
    "\377\115\346\116\337\117\341\120\340\125\350\131\342" +
    "\001\002\000\052\020\uff72\057\uff72\060\uff72\073\uff72\074" +
    "\uff72\075\uff72\076\uff72\101\uff72\103\uff72\106\uff72\110\uff72" +
    "\114\uff72\115\uff72\116\uff72\117\uff72\120\uff72\122\uff72\123" +
    "\uff72\125\uff72\131\uff72\001\002\000\004\017\u0101\001\002" +
    "\000\004\137\u0102\001\002\000\004\113\u0109\001\002\000" +
    "\004\020\u0107\001\002\000\006\020\uffa3\110\u0105\001\002" +
    "\000\004\137\u0102\001\002\000\004\020\uffa2\001\002\000" +
    "\070\051\302\052\311\055\264\056\313\061\271\062\266" +
    "\063\277\064\317\065\305\066\306\067\303\070\300\071" +
    "\315\072\312\073\267\076\310\077\275\102\274\105\276" +
    "\111\270\127\273\130\307\134\316\135\323\136\265\137" +
    "\320\150\322\001\002\000\052\020\uff88\057\366\060\370" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\101\uff88\103\uff88\106" +
    "\uff88\110\uff88\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88" +
    "\122\367\123\365\125\uff88\131\uff88\001\002\000\004\136" +
    "\u010a\001\002\000\006\020\uffa1\110\uffa1\001\002\000\070" +
    "\051\302\052\311\055\264\056\313\061\271\062\266\063" +
    "\277\064\317\065\305\066\306\067\303\070\300\071\315" +
    "\072\312\073\267\076\310\077\275\102\274\105\276\111" +
    "\270\127\273\130\307\134\316\135\323\136\265\137\320" +
    "\150\322\001\002\000\030\073\343\074\347\075\344\076" +
    "\336\106\u010d\115\346\116\337\117\341\120\340\125\350" +
    "\131\342\001\002\000\052\020\uff70\057\uff70\060\uff70\073" +
    "\uff70\074\uff70\075\uff70\076\uff70\101\uff70\103\uff70\106\uff70" +
    "\110\uff70\114\uff70\115\uff70\116\uff70\117\uff70\120\uff70\122" +
    "\uff70\123\uff70\125\uff70\131\uff70\001\002\000\004\017\u010f" +
    "\001\002\000\004\137\u0102\001\002\000\004\020\u0111\001" +
    "\002\000\070\051\302\052\311\055\264\056\313\061\271" +
    "\062\266\063\277\064\317\065\305\066\306\067\303\070" +
    "\300\071\315\072\312\073\267\076\310\077\275\102\274" +
    "\105\276\111\270\127\273\130\307\134\316\135\323\136" +
    "\265\137\320\150\322\001\002\000\052\020\uff79\057\uff79" +
    "\060\uff79\073\343\074\347\075\344\076\336\101\uff79\103" +
    "\uff79\106\uff79\110\uff79\114\uff79\115\346\116\337\117\341" +
    "\120\340\122\uff79\123\uff79\125\350\131\342\001\002\000" +
    "\052\020\uff7f\057\uff7f\060\uff7f\073\uff7f\074\uff7f\075\uff7f" +
    "\076\uff7f\101\uff7f\103\uff7f\106\uff7f\110\uff7f\114\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\122\uff7f\123\uff7f\125\uff7f" +
    "\131\uff7f\001\002\000\004\136\u0115\001\002\000\004\110" +
    "\u0116\001\002\000\004\150\u0117\001\002\000\004\113\u011a" +
    "\001\002\000\004\106\u0119\001\002\000\052\020\uff71\057" +
    "\uff71\060\uff71\073\uff71\074\uff71\075\uff71\076\uff71\101\uff71" +
    "\103\uff71\106\uff71\110\uff71\114\uff71\115\uff71\116\uff71\117" +
    "\uff71\120\uff71\122\uff71\123\uff71\125\uff71\131\uff71\001\002" +
    "\000\070\051\302\052\311\055\264\056\313\061\271\062" +
    "\266\063\277\064\317\065\305\066\306\067\303\070\300" +
    "\071\315\072\312\073\267\076\310\077\275\102\274\105" +
    "\276\111\270\127\273\130\307\134\316\135\323\136\265" +
    "\137\320\150\322\001\002\000\032\073\343\074\347\075" +
    "\344\076\336\106\uffa0\110\u011c\115\346\116\337\117\341" +
    "\120\340\125\350\131\342\001\002\000\004\150\u0117\001" +
    "\002\000\004\106\uff9f\001\002\000\070\051\302\052\311" +
    "\055\264\056\313\061\271\062\266\063\277\064\317\065" +
    "\305\066\306\067\303\070\300\071\315\072\312\073\267" +
    "\076\310\077\275\102\274\105\276\111\270\127\273\130" +
    "\307\134\316\135\323\136\265\137\320\150\322\001\002" +
    "\000\030\073\343\074\347\075\344\076\336\106\u0120\115" +
    "\346\116\337\117\341\120\340\125\350\131\342\001\002" +
    "\000\052\020\uff87\057\uff87\060\uff87\073\uff87\074\uff87\075" +
    "\uff87\076\uff87\101\uff87\103\uff87\106\uff87\110\uff87\114\uff87" +
    "\115\uff87\116\uff87\117\uff87\120\uff87\122\uff87\123\uff87\125" +
    "\uff87\131\uff87\001\002\000\004\103\u0122\001\002\000\020" +
    "\020\uffc0\023\uffc0\025\uffc0\034\uffc0\054\uffc0\146\uffc0\147" +
    "\uffc0\001\002\000\070\051\302\052\311\055\264\056\313" +
    "\061\271\062\266\063\277\064\317\065\305\066\306\067" +
    "\303\070\300\071\315\072\312\073\267\076\310\077\275" +
    "\102\274\105\276\111\270\127\273\130\307\134\316\135" +
    "\323\136\265\137\320\150\322\001\002\000\030\073\343" +
    "\074\347\075\344\076\336\110\u0125\115\346\116\337\117" +
    "\341\120\340\125\350\131\342\001\002\000\070\051\302" +
    "\052\311\055\264\056\313\061\271\062\266\063\277\064" +
    "\317\065\305\066\306\067\303\070\300\071\315\072\312" +
    "\073\267\076\310\077\275\102\274\105\276\111\270\127" +
    "\273\130\307\134\316\135\323\136\265\137\320\150\322" +
    "\001\002\000\030\073\343\074\347\075\344\076\336\106" +
    "\u0127\115\346\116\337\117\341\120\340\125\350\131\342" +
    "\001\002\000\052\020\uff73\057\uff73\060\uff73\073\uff73\074" +
    "\uff73\075\uff73\076\uff73\101\uff73\103\uff73\106\uff73\110\uff73" +
    "\114\uff73\115\uff73\116\uff73\117\uff73\120\uff73\122\uff73\123" +
    "\uff73\125\uff73\131\uff73\001\002\000\004\017\u0129\001\002" +
    "\000\004\137\u0102\001\002\000\004\020\u012b\001\002\000" +
    "\070\051\302\052\311\055\264\056\313\061\271\062\266" +
    "\063\277\064\317\065\305\066\306\067\303\070\300\071" +
    "\315\072\312\073\267\076\310\077\275\102\274\105\276" +
    "\111\270\127\273\130\307\134\316\135\323\136\265\137" +
    "\320\150\322\001\002\000\052\020\uff7a\057\uff7a\060\uff7a" +
    "\073\343\074\347\075\344\076\336\101\uff7a\103\uff7a\106" +
    "\uff7a\110\uff7a\114\uff7a\115\346\116\337\117\341\120\340" +
    "\122\uff7a\123\uff7a\125\350\131\342\001\002\000\070\051" +
    "\302\052\311\055\264\056\313\061\271\062\266\063\277" +
    "\064\317\065\305\066\306\067\303\070\300\071\315\072" +
    "\312\073\267\076\310\077\275\102\274\105\276\111\270" +
    "\127\273\130\307\134\316\135\323\136\265\137\320\150" +
    "\322\001\002\000\030\073\343\074\347\075\344\076\336" +
    "\106\u012f\115\346\116\337\117\341\120\340\125\350\131" +
    "\342\001\002\000\052\020\uff6f\057\uff6f\060\uff6f\073\uff6f" +
    "\074\uff6f\075\uff6f\076\uff6f\101\uff6f\103\uff6f\106\uff6f\110" +
    "\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\120\uff6f\122\uff6f" +
    "\123\uff6f\125\uff6f\131\uff6f\001\002\000\070\051\302\052" +
    "\311\055\264\056\313\061\271\062\266\063\277\064\317" +
    "\065\305\066\306\067\303\070\300\071\315\072\312\073" +
    "\267\076\310\077\275\102\274\105\276\111\270\127\273" +
    "\130\307\134\316\135\323\136\265\137\320\150\322\001" +
    "\002\000\030\073\343\074\347\075\344\076\336\106\u0132" +
    "\115\346\116\337\117\341\120\340\125\350\131\342\001" +
    "\002\000\052\020\uff76\057\uff76\060\uff76\073\uff76\074\uff76" +
    "\075\uff76\076\uff76\101\uff76\103\uff76\106\uff76\110\uff76\114" +
    "\uff76\115\uff76\116\uff76\117\uff76\120\uff76\122\uff76\123\uff76" +
    "\125\uff76\131\uff76\001\002\000\040\057\366\060\370\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\106\u0136\115\uff86\116\uff86" +
    "\117\uff86\120\uff86\122\367\123\365\125\uff86\131\uff86\001" +
    "\002\000\030\073\343\074\347\075\344\076\336\106\u0135" +
    "\115\346\116\337\117\341\120\340\125\350\131\342\001" +
    "\002\000\052\020\uff81\057\uff81\060\uff81\073\uff81\074\uff81" +
    "\075\uff81\076\uff81\101\uff81\103\uff81\106\uff81\110\uff81\114" +
    "\uff81\115\uff81\116\uff81\117\uff81\120\uff81\122\uff81\123\uff81" +
    "\125\uff81\131\uff81\001\002\000\052\020\uff97\057\uff97\060" +
    "\uff97\073\uff97\074\uff97\075\uff97\076\uff97\101\uff97\103\uff97" +
    "\106\uff97\110\uff97\114\uff97\115\uff97\116\uff97\117\uff97\120" +
    "\uff97\122\uff97\123\uff97\125\uff97\131\uff97\001\002\000\070" +
    "\051\302\052\311\055\264\056\313\061\271\062\266\063" +
    "\277\064\317\065\305\066\306\067\303\070\300\071\315" +
    "\072\312\073\267\076\310\077\275\102\274\105\276\111" +
    "\270\127\273\130\307\134\316\135\323\136\265\137\320" +
    "\150\322\001\002\000\040\057\366\060\370\073\uff86\074" +
    "\uff86\075\uff86\076\uff86\106\u0139\115\uff86\116\uff86\117\uff86" +
    "\120\uff86\122\367\123\365\125\uff86\131\uff86\001\002\000" +
    "\004\100\u013a\001\002\000\070\051\302\052\311\055\264" +
    "\056\313\061\271\062\266\063\277\064\317\065\305\066" +
    "\306\067\303\070\300\071\315\072\312\073\267\076\310" +
    "\077\275\102\274\105\276\111\270\127\273\130\307\134" +
    "\316\135\323\136\265\137\320\150\322\001\002\000\030" +
    "\073\343\074\347\075\344\076\336\101\u013c\115\346\116" +
    "\337\117\341\120\340\125\350\131\342\001\002\000\070" +
    "\051\302\052\311\055\264\056\313\061\271\062\266\063" +
    "\277\064\317\065\305\066\306\067\303\070\300\071\315" +
    "\072\312\073\267\076\310\077\275\102\274\105\276\111" +
    "\270\127\273\130\307\134\316\135\323\136\265\137\320" +
    "\150\322\001\002\000\052\020\uff78\057\uff78\060\uff78\073" +
    "\343\074\347\075\344\076\336\101\uff78\103\uff78\106\uff78" +
    "\110\uff78\114\uff78\115\346\116\337\117\341\120\340\122" +
    "\uff78\123\uff78\125\350\131\342\001\002\000\004\136\265" +
    "\001\002\000\004\106\u0140\001\002\000\004\017\u0141\001" +
    "\002\000\004\041\u0144\001\002\000\006\020\uff9e\110\u0149" +
    "\001\002\000\004\020\u0148\001\002\000\004\150\u0145\001" +
    "\002\000\004\113\u0146\001\002\000\070\051\302\052\311" +
    "\055\264\056\313\061\271\062\266\063\277\064\317\065" +
    "\305\066\306\067\303\070\300\071\315\072\312\073\267" +
    "\076\310\077\275\102\274\105\276\111\270\127\273\130" +
    "\307\134\316\135\323\136\265\137\320\150\322\001\002" +
    "\000\032\020\uff9c\073\343\074\347\075\344\076\336\110" +
    "\uff9c\115\346\116\337\117\341\120\340\125\350\131\342" +
    "\001\002\000\052\020\uff77\057\uff77\060\uff77\073\uff77\074" +
    "\uff77\075\uff77\076\uff77\101\uff77\103\uff77\106\uff77\110\uff77" +
    "\114\uff77\115\uff77\116\uff77\117\uff77\120\uff77\122\uff77\123" +
    "\uff77\125\uff77\131\uff77\001\002\000\004\041\u0144\001\002" +
    "\000\004\020\uff9d\001\002\000\072\020\uffbd\051\uffbd\052" +
    "\uffbd\055\uffbd\056\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\076\uffbd\077\uffbd\102\uffbd\105\uffbd\111\uffbd\127\uffbd" +
    "\130\uffbd\134\uffbd\135\uffbd\136\uffbd\137\uffbd\150\uffbd\001" +
    "\002\000\052\020\uff8e\057\uff8e\060\uff8e\073\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\101\uff8e\103\uff8e\106\uff8e\110\uff8e\114" +
    "\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e" +
    "\125\uff8e\131\uff8e\001\002\000\040\057\366\060\370\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\114\u0150\115\uff86\116\uff86" +
    "\117\uff86\120\uff86\122\367\123\365\125\uff86\131\uff86\001" +
    "\002\000\030\073\343\074\347\075\344\076\336\114\u014f" +
    "\115\346\116\337\117\341\120\340\125\350\131\342\001" +
    "\002\000\052\020\uff82\057\uff82\060\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\101\uff82\103\uff82\106\uff82\110\uff82\114" +
    "\uff82\115\uff82\116\uff82\117\uff82\120\uff82\122\uff82\123\uff82" +
    "\125\uff82\131\uff82\001\002\000\052\020\uff98\057\uff98\060" +
    "\uff98\073\uff98\074\uff98\075\uff98\076\uff98\101\uff98\103\uff98" +
    "\106\uff98\110\uff98\114\uff98\115\uff98\116\uff98\117\uff98\120" +
    "\uff98\122\uff98\123\uff98\125\uff98\131\uff98\001\002\000\052" +
    "\020\uff80\057\uff80\060\uff80\073\uff80\074\uff80\075\uff80\076" +
    "\uff80\101\uff80\103\uff80\106\uff80\110\uff80\114\uff80\115\uff80" +
    "\116\uff80\117\uff80\120\uff80\122\uff80\123\uff80\125\uff80\131" +
    "\uff80\001\002\000\070\051\302\052\311\055\264\056\313" +
    "\061\271\062\266\063\277\064\317\065\305\066\306\067" +
    "\303\070\300\071\315\072\312\073\267\076\310\077\275" +
    "\102\274\105\276\111\270\127\273\130\307\134\316\135" +
    "\323\136\265\137\320\150\322\001\002\000\030\073\343" +
    "\074\347\075\344\076\336\106\u0154\115\346\116\337\117" +
    "\341\120\340\125\350\131\342\001\002\000\052\020\uff75" +
    "\057\uff75\060\uff75\073\uff75\074\uff75\075\uff75\076\uff75\101" +
    "\uff75\103\uff75\106\uff75\110\uff75\114\uff75\115\uff75\116\uff75" +
    "\117\uff75\120\uff75\122\uff75\123\uff75\125\uff75\131\uff75\001" +
    "\002\000\006\136\330\137\327\001\002\000\004\106\u015a" +
    "\001\002\000\006\106\uffa5\110\u0158\001\002\000\006\136" +
    "\330\137\327\001\002\000\004\106\uffa4\001\002\000\054" +
    "\020\uffa7\057\uffa7\060\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\101\uffa7\103\uffa7\106\uffa7\110\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\120\uffa7\122\uffa7\123\uffa7\124\uffa7\125" +
    "\uffa7\131\uffa7\001\002\000\004\017\u015c\001\002\000\004" +
    "\137\u0102\001\002\000\004\020\u015e\001\002\000\070\051" +
    "\302\052\311\055\264\056\313\061\271\062\266\063\277" +
    "\064\317\065\305\066\306\067\303\070\300\071\315\072" +
    "\312\073\267\076\310\077\275\102\274\105\276\111\270" +
    "\127\273\130\307\134\316\135\323\136\265\137\320\150" +
    "\322\001\002\000\052\020\uff89\057\366\060\370\073\uff89" +
    "\074\uff89\075\uff89\076\uff89\101\uff89\103\uff89\106\uff89\110" +
    "\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89\122\367" +
    "\123\365\125\uff89\131\uff89\001\002\000\004\136\265\001" +
    "\002\000\004\124\u0167\001\002\000\006\020\uffc4\136\265" +
    "\001\002\000\004\020\u0164\001\002\000\004\103\u0165\001" +
    "\002\000\020\020\uffc7\023\uffc7\025\uffc7\034\uffc7\054\uffc7" +
    "\146\uffc7\147\uffc7\001\002\000\004\020\uffc3\001\002\000" +
    "\070\051\302\052\311\055\264\056\313\061\271\062\266" +
    "\063\277\064\317\065\305\066\306\067\303\070\300\071" +
    "\315\072\312\073\267\076\310\077\275\102\274\105\276" +
    "\111\270\127\273\130\307\134\316\135\323\136\265\137" +
    "\320\150\322\001\002\000\030\073\343\074\347\075\344" +
    "\076\336\103\u0169\115\346\116\337\117\341\120\340\125" +
    "\350\131\342\001\002\000\006\020\uffc2\136\uffc2\001\002" +
    "\000\004\020\ufff3\001\002\000\004\136\u016e\001\002\000" +
    "\004\020\u017a\001\002\000\006\020\uffec\136\u016e\001\002" +
    "\000\004\113\u016f\001\002\000\006\017\u0171\140\u0170\001" +
    "\002\000\004\103\u0178\001\002\000\004\150\u0172\001\002" +
    "\000\006\020\uffe6\110\u0176\001\002\000\004\020\u0174\001" +
    "\002\000\004\103\u0175\001\002\000\006\020\uffe9\136\uffe9" +
    "\001\002\000\004\150\u0172\001\002\000\004\020\uffe5\001" +
    "\002\000\006\020\uffea\136\uffea\001\002\000\004\020\uffeb" +
    "\001\002\000\004\103\u017b\001\002\000\020\020\uffed\023" +
    "\uffed\025\uffed\034\uffed\054\uffed\146\uffed\147\uffed\001\002" +
    "\000\004\136\u017e\001\002\000\004\020\u01b8\001\002\000" +
    "\006\105\u0182\113\u0181\001\002\000\006\020\uffce\136\u017e" +
    "\001\002\000\004\020\uffcd\001\002\000\004\017\uffd7\001" +
    "\002\000\012\136\u018d\141\u018e\143\u018f\144\u018b\001\002" +
    "\000\004\017\u0184\001\002\000\014\036\u0187\042\u0185\043" +
    "\u0188\044\u0186\145\u0189\001\002\000\004\110\u01aa\001\002" +
    "\000\004\110\u01a2\001\002\000\004\110\u019a\001\002\000" +
    "\004\110\u0196\001\002\000\004\110\u018a\001\002\000\012" +
    "\136\u018d\141\u018e\143\u018f\144\u018b\001\002\000\010\020" +
    "\uffd1\106\uffd1\110\uffd1\001\002\000\004\110\u0190\001\002" +
    "\000\010\020\uffd3\106\uffd3\110\uffd3\001\002\000\010\020" +
    "\uffd0\106\uffd0\110\uffd0\001\002\000\010\020\uffd2\106\uffd2" +
    "\110\uffd2\001\002\000\004\037\u0191\001\002\000\004\124" +
    "\u0192\001\002\000\022\026\067\027\075\127\073\130\077" +
    "\134\036\135\076\136\066\150\071\001\002\000\004\020" +
    "\u0194\001\002\000\004\103\u0195\001\002\000\006\020\uffcb" +
    "\136\uffcb\001\002\000\012\136\u018d\141\u018e\143\u018f\144" +
    "\u018b\001\002\000\004\020\u0198\001\002\000\004\103\u0199" +
    "\001\002\000\006\020\uffc9\136\uffc9\001\002\000\012\136" +
    "\u018d\141\u018e\143\u018f\144\u018b\001\002\000\004\110\u019c" +
    "\001\002\000\004\037\u019d\001\002\000\004\124\u019e\001" +
    "\002\000\022\026\067\027\075\127\073\130\077\134\036" +
    "\135\076\136\066\150\071\001\002\000\004\020\u01a0\001" +
    "\002\000\004\103\u01a1\001\002\000\006\020\uffcc\136\uffcc" +
    "\001\002\000\012\136\u018d\141\u018e\143\u018f\144\u018b\001" +
    "\002\000\004\110\u01a4\001\002\000\004\037\u01a5\001\002" +
    "\000\004\124\u01a6\001\002\000\022\026\067\027\075\127" +
    "\073\130\077\134\036\135\076\136\066\150\071\001\002" +
    "\000\004\020\u01a8\001\002\000\004\103\u01a9\001\002\000" +
    "\006\020\uffc8\136\uffc8\001\002\000\012\136\u018d\141\u018e" +
    "\143\u018f\144\u018b\001\002\000\004\110\u01ac\001\002\000" +
    "\004\046\u01ad\001\002\000\004\124\u01ae\001\002\000\004" +
    "\134\u01af\001\002\000\004\020\u01b0\001\002\000\004\103" +
    "\u01b1\001\002\000\006\020\uffca\136\uffca\001\002\000\006" +
    "\106\uffd5\110\u01b6\001\002\000\004\106\u01b4\001\002\000" +
    "\004\113\u01b5\001\002\000\004\017\uffd6\001\002\000\012" +
    "\136\u018d\141\u018e\143\u018f\144\u018b\001\002\000\004\106" +
    "\uffd4\001\002\000\004\103\u01b9\001\002\000\020\020\uffcf" +
    "\023\uffcf\025\uffcf\034\uffcf\054\uffcf\146\uffcf\147\uffcf\001" +
    "\002\000\012\002\ufffa\005\ufffa\006\ufffa\040\ufffa\001\002" +
    "\000\070\051\302\052\311\055\264\056\313\061\271\062" +
    "\266\063\277\064\317\065\305\066\306\067\303\070\300" +
    "\071\315\072\312\073\267\076\310\077\275\102\274\105" +
    "\276\111\270\127\273\130\307\134\316\135\323\136\265" +
    "\137\320\150\322\001\002\000\030\073\343\074\347\075" +
    "\344\076\336\103\u01bd\115\346\116\337\117\341\120\340" +
    "\125\350\131\342\001\002\000\020\020\uffc1\023\uffc1\025" +
    "\uffc1\034\uffc1\054\uffc1\146\uffc1\147\uffc1\001\002\000\004" +
    "\020\ufff7\001\002\000\004\020\ufff5\001\002\000\004\017" +
    "\u01c1\001\002\000\004\005\u01c2\001\002\000\004\124\u01c3" +
    "\001\002\000\004\136\u01c4\001\002\000\004\103\u01c5\001" +
    "\002\000\006\011\u01c6\040\u01c7\001\002\000\004\017\u01cb" +
    "\001\002\000\006\061\026\136\030\001\002\000\004\103" +
    "\u01c9\001\002\000\004\020\u01ca\001\002\000\012\002\uffb7" +
    "\005\uffb7\006\uffb7\040\uffb7\001\002\000\004\136\144\001" +
    "\002\000\004\020\u01cd\001\002\000\004\103\u01ce\001\002" +
    "\000\004\040\u01cf\001\002\000\004\017\u01d0\001\002\000" +
    "\006\061\026\136\030\001\002\000\004\020\u01d2\001\002" +
    "\000\004\103\u01d3\001\002\000\004\020\u01d4\001\002\000" +
    "\012\002\uffb8\005\uffb8\006\uffb8\040\uffb8\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\012\003\007\004\003\006\011\007\004\001" +
    "\001\000\012\003\u01d5\004\003\006\011\007\004\001\001" +
    "\000\012\003\u01d4\004\003\006\011\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\012\004\003\006\011\007\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\030\046\026\001\001\000\002\001" +
    "\001\000\006\045\103\046\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\101\036\077\037\067\040" +
    "\073\001\001\000\004\047\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\035\071" +
    "\036\077\037\067\040\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\120\046\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\142\033\141\001" +
    "\001\000\006\032\175\033\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\155\046\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\177\033\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\204\046\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\227\001\001\000\020\005\246\011\244" +
    "\020\255\023\243\026\257\027\251\041\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u01be\011" +
    "\244\020\255\023\243\026\257\027\251\041\253\001\001" +
    "\000\020\005\u01bd\011\244\020\255\023\243\026\257\027" +
    "\251\041\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0169\011" +
    "\244\020\255\023\243\026\257\027\251\041\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\261\011\244\020\255\023\243\026\257\027\251" +
    "\041\253\001\001\000\002\001\001\000\020\005\260\011" +
    "\244\020\255\023\243\026\257\027\251\041\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\303\031" +
    "\320\042\313\043\300\044\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\313\043" +
    "\u0150\044\333\001\001\000\010\042\313\043\u014d\044\u014c" +
    "\001\001\000\010\042\313\043\300\044\u014b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\313\043\u0133\044\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\313" +
    "\043\u0112\044\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\323\031\320\042\313\043\300\044\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\331\001\001\000\004\051\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\313\043\334\044\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\313\043\363\044" +
    "\333\001\001\000\010\042\313\043\362\044\333\001\001" +
    "\000\010\042\313\043\361\044\333\001\001\000\010\042" +
    "\313\043\360\044\333\001\001\000\010\042\313\043\357" +
    "\044\333\001\001\000\010\042\313\043\356\044\333\001" +
    "\001\000\010\042\313\043\355\044\333\001\001\000\010" +
    "\042\313\043\353\044\333\001\001\000\010\042\313\043" +
    "\352\044\333\001\001\000\010\042\313\043\351\044\333" +
    "\001\001\000\010\042\313\043\350\044\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\313\043" +
    "\300\044\373\001\001\000\010\042\313\043\300\044\372" +
    "\001\001\000\010\042\313\043\300\044\371\001\001\000" +
    "\010\042\313\043\300\044\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\042\313\043\375\044\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\u0102\053" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\u0105\053\u0103\001\001\000\002\001" +
    "\001\000\010\042\313\043\300\044\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\313\043\u010b\044\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\u010f\053\u0103\001" +
    "\001\000\002\001\001\000\010\042\313\043\u0111\044\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\313\043\u011a\044\333\001\001\000\002\001\001\000\004" +
    "\054\u011c\001\001\000\002\001\001\000\010\042\313\043" +
    "\u011e\044\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\313\043" +
    "\u0123\044\333\001\001\000\002\001\001\000\010\042\313" +
    "\043\u0125\044\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u0129\053\u0103\001\001" +
    "\000\002\001\001\000\010\042\313\043\u012b\044\333\001" +
    "\001\000\002\001\001\000\010\042\313\043\u012d\044\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\313\043\u0130\044\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\313\043\300\044\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\313\043\u013a\044\333\001\001\000\002\001\001\000\010" +
    "\042\313\043\u013c\044\333\001\001\000\002\001\001\000" +
    "\004\042\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\u0142\056\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\313\043\u0146\044\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\u0149\056\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\313\043\u0152\044\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\u0155" +
    "\051\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\u0158\051\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\u015c\053\u0103\001" +
    "\001\000\002\001\001\000\010\042\313\043\300\044\u015e" +
    "\001\001\000\002\001\001\000\010\024\u0162\025\u0161\042" +
    "\u0160\001\001\000\002\001\001\000\010\024\u0165\025\u0161" +
    "\042\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\313\043\u0167" +
    "\044\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\u016b\017\u016c\001\001\000\002" +
    "\001\001\000\006\013\u0178\017\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\u017c\022\u017e\001\001" +
    "\000\002\001\001\000\004\014\u0182\001\001\000\006\021" +
    "\u017f\022\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01b2\016\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u018b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\u0192\036\077\037\067" +
    "\040\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u0196\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u019a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\u019e\036\077\037\067\040\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u01a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\u01a6\036\077\037\067\040\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01aa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u01b6\016\u01b1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\313\043\u01bb\044\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u01c7\046\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\u01cb\033\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\u01d0\046\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Just a testing interface (loads formula from file)
	public static void main(String args[]) throws Exception {
	    if (args.length == 0) {
	    	System.out.println("Must pass a RDDL file as the first command line argument");
	    	System.exit(1);
	    }
		RDDL rddl = parse(new File(args[0]));
		System.out.println(rddl);
    }

	// The main runtime method to call
	public static RDDL parse(String s) 
 		throws ParseException {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new StringReader(s));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}

	// The main runtime method to call
	public static RDDL parse(File f) 
 		throws Exception {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new FileInputStream(f));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPR ::= POISSON LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Poisson(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPR ::= GEOMETRIC LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Geometric(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPR ::= DISCRETE LPAREN IDENT COMMA ENUM_EXPR_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int enum_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int enum_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String enum_type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Discrete(enum_type, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPR ::= EXPONENTIAL LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Exponential(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPR ::= NORMAL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR mu = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR var = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Normal(mu, var); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPR ::= UNIFORM LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR l = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR u = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Uniform(l,u); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPR ::= KRON_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR k = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.KronDelta(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPR ::= DIRAC_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR d = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.DiracDelta(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPR ::= SWITCH LPAREN PVAR_EXPR RPAREN LCURLY CASE_LIST RCURLY 
            {
              RDDL.EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.SWITCH_EXPR(p, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPR ::= IF LPAREN BOOL_EXPR RPAREN THEN EXPR ELSE EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.IF_EXPR(b, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPR ::= PROD_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("prod", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPR ::= SUM_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("sum", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPR ::= EXPR MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPR ::= EXPR PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "+"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPR ::= EXPR DIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "/"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPR ::= EXPR TIMES EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "*"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPR ::= MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(new RDDL.INT_CONST_EXPR(0), e, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPR ::= PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPR ::= LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPR ::= LBRACK EXPR RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPR ::= DOUBLE 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.REAL_CONST_EXPR(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPR ::= INTEGER 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.INT_CONST_EXPR(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPR ::= ENUM_VAL 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR ::= BOOL_EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BOOL_EXPR ::= BERNOULLI LPAREN EXPR RPAREN 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Bernoulli(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BOOL_EXPR ::= EXISTS UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("exists", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BOOL_EXPR ::= FORALL UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("forall", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BOOL_EXPR ::= BOOL_EXPR EQUIV BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "<=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BOOL_EXPR ::= BOOL_EXPR IMPLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BOOL_EXPR ::= BOOL_EXPR OR BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "|"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BOOL_EXPR ::= BOOL_EXPR AND BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BOOL_EXPR ::= NOT BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.NEG_EXPR(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BOOL_EXPR ::= EXPR LESSEQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BOOL_EXPR ::= EXPR LESS EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BOOL_EXPR ::= EXPR GREATEREQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BOOL_EXPR ::= EXPR GREATER EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BOOL_EXPR ::= EXPR NEQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BOOL_EXPR ::= EXPR COMP_EQUAL EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BOOL_EXPR ::= VAR NEQ TERM 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t2 = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJ_COMP_EXPR(new RDDL.LVAR(t1), t2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BOOL_EXPR ::= VAR COMP_EQUAL TERM 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t2 = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJ_COMP_EXPR(new RDDL.LVAR(t1), t2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BOOL_EXPR ::= LPAREN BOOL_EXPR RPAREN 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR e = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BOOL_EXPR ::= LBRACK BOOL_EXPR RBRACK 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR e = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BOOL_EXPR ::= FALSE 
            {
              RDDL.BOOL_EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BOOL_EXPR ::= TRUE 
            {
              RDDL.BOOL_EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BOOL_EXPR ::= PVAR_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE_DEF ::= CASE ENUM_VAL COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(new RDDL.ENUM_VAL(v),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE_LIST ::= CASE_DEF COMMA CASE_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE_LIST ::= CASE_DEF 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ENUM_EXPR_LIST ::= ENUM_VAL COLON EXPR COMMA ENUM_EXPR_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*ENUM_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ENUM_EXPR_LIST ::= ENUM_VAL COLON EXPR 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i),e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*ENUM_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPED_VAR ::= VAR COLON IDENT 
            {
              RDDL.LTYPED_VAR RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LTYPED_VAR(var, type); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*TYPED_VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPED_VAR_LIST ::= TYPED_VAR COMMA TYPED_VAR_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPED_VAR_LIST ::= TYPED_VAR 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TERM_LIST ::= TERM COMMA TERM_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TERM_LIST ::= TERM 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PVAR_EXPR ::= IDENT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERM ::= IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LCONST(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LCONST_LIST ::= IDENT COMMA LCONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.LCONST(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LCONST_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.LCONST(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PVAR_INST_DEF ::= IDENT ASSIGN_EQUAL ANY_TYPE SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN ASSIGN_EQUAL ANY_TYPE SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PVAR_INST_DEF ::= NOT IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PVAR_INST_DEF ::= NOT IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PVAR_INST_DEF ::= IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PVAR_INST_LIST ::= PVAR_INST_DEF PVAR_INST_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PVAR_INST_LIST ::= PVAR_INST_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OBJECTS_DEF ::= IDENT COLON LCURLY LCONST_LIST RCURLY SEMI 
            {
              RDDL.OBJECTS_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.OBJECTS_DEF(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*OBJECTS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OBJECTS_LIST ::= OBJECTS_DEF OBJECTS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OBJECTS_LIST ::= OBJECTS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS PVAR_INST_LIST SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,null,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,objects,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-28)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-29)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-32)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-28)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATE_CONS_DEF ::= BOOL_EXPR SEMI 
            {
              RDDL.STATE_CONS_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR expr = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_CONS_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*STATE_CONS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATE_CONS_LIST ::= STATE_CONS_DEF STATE_CONS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STATE_CONS_LIST ::= STATE_CONS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY STATE_CONS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REW_SECTION ::= REWARD ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.REWARD_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.REWARD_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*REW_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CPF_DEF ::= PVAR_EXPR ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.CPF_DEF RESULT = null;
		int pexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.PVAR_EXPR pexpr = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.CPF_DEF(pexpr, expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*CPF_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CPF_LIST ::= CPF_DEF CPF_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CPF_LIST ::= CPF_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CPF_HEADER ::= CDFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CPF_HEADER ::= CPFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CPF_SECTION ::= CPF_HEADER LCURLY CPF_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 list.add(0,new RDDL.CPF_HEADER_NAME(ident)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CPF_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY ACTION COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_ACTION_DEF(varname, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY OBSERVATION COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_OBS_DEF(varname, range, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY INTERMEDIATE COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY NON_FLUENT COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, true, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY STATE COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, false, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PVAR_LIST ::= PVAR_DEF PVAR_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PVAR_LIST ::= PVAR_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PVAR_SECTION ::= PVARIABLES LCURLY PVAR_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*PVAR_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPE_SPEC ::= BOOL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE_SPEC ::= REAL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE_SPEC ::= INT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE_SPEC ::= IDENT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAM_LIST2 ::= TYPE_SPEC COMMA PARAM_LIST2 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAM_LIST2 ::= TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAM_LIST ::= LPAREN PARAM_LIST2 RPAREN COLON 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAM_LIST ::= COLON 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INT_TYPE ::= NEG_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MIN_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INT_TYPE ::= POS_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MAX_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INT_TYPE ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DOUBLE_TYPE ::= NEG_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.NEGATIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DOUBLE_TYPE ::= POS_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.POSITIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DOUBLE_TYPE ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOL_TYPE ::= FALSE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOL_TYPE ::= TRUE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ANY_TYPE ::= ENUM_VAL 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ANY_TYPE ::= IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ANY_TYPE ::= INT_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ANY_TYPE ::= DOUBLE_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ANY_TYPE ::= BOOL_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENUM_LIST ::= ENUM_VAL COMMA ENUM_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENUM_LIST ::= ENUM_VAL 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STRING_LIST ::= IDENT COMMA STRING_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRING_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_LIST RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_DEF ::= IDENT COLON OBJECT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_LIST ::= TYPE_DEF TYPE_LIST 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,def); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE_LIST ::= TYPE_DEF 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {def})); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE_SECTION ::= TYPES LCURLY TYPE_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*TYPE_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DOMAIN_LIST ::= STATE_CONS_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DOMAIN_LIST ::= REW_SECTION 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {r})); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DOMAIN_LIST ::= CPF_SECTION 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOMAIN_LIST ::= PVAR_SECTION 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DOMAIN_LIST ::= TYPE_SECTION 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DOMAIN_LIST ::= STATE_CONS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOMAIN_LIST ::= REW_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,r);    RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOMAIN_LIST ::= CPF_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(c); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DOMAIN_LIST ::= PVAR_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DOMAIN_LIST ::= TYPE_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		 RESULT = new RDDL.DOMAIN(new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY STRING_LIST RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.DOMAIN(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY REQ_SECTION DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.DOMAIN domain = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RDDL_BLOCK ::= NONFLUENT_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RDDL_BLOCK ::= INSTANCE_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RDDL_BLOCK ::= DOMAIN_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addDomain(d); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RDDL_BLOCK ::= NONFLUENT_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RDDL_BLOCK ::= INSTANCE_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RDDL_BLOCK ::= DOMAIN_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addDomain(d);   RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RDDL_BLOCK EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL start_val = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

